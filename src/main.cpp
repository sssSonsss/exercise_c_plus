#include <iostream>
#include <memory>
#include <string>
#include <limits>
#include "database.h"
#include "user.h"
#include "wallet.h"
#include "transaction.h"
#include "otp.h"

class WalletSystem {
private:
    std::shared_ptr<Database> db;
    std::shared_ptr<User> current_user;

    void clearInputBuffer() {
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    }

    int getIntInput() {
        int choice;
        while (!(std::cin >> choice)) {
            std::cout << "Invalid input. Please enter a number: ";
            clearInputBuffer();
        }
        clearInputBuffer();
        return choice;
    }

    std::string getStringInput() {
        std::string input;
        std::getline(std::cin, input);
        // Trim whitespace
        input.erase(0, input.find_first_not_of(" \t\r\n"));
        input.erase(input.find_last_not_of(" \t\r\n") + 1);
        return input;
    }

    bool validateUsername(const std::string& username) {
        if (username.empty()) {
            std::cout << "Tên đăng nhập không được để trống.\n";
            return false;
        }
        if (username.length() < 3 || username.length() > 20) {
            std::cout << "Tên đăng nhập phải từ 3 đến 20 ký tự.\n";
            return false;
        }
        return true;
    }

    bool validatePassword(const std::string& password) {
        if (password.empty()) {
            std::cout << "Mật khẩu không được để trống.\n";
            return false;
        }
        if (password.length() < 6) {
            std::cout << "Mật khẩu phải có ít nhất 6 ký tự.\n";
            return false;
        }
        return true;
    }

    bool validateEmail(const std::string& email) {
        if (email.empty()) {
            std::cout << "Email không được để trống.\n";
            return false;
        }
        if (email.find('@') == std::string::npos || email.find('.') == std::string::npos) {
            std::cout << "Email không đúng định dạng.\n";
            return false;
        }
        return true;
    }

    bool validateAmount(double amount) {
        if (amount <= 0) {
            std::cout << "Số điểm phải lớn hơn 0.\n";
            return false;
        }
        if (amount > 1000000) {
            std::cout << "Số điểm vượt quá giới hạn.\n";
            return false;
        }
        return true;
    }

    void showMainMenu() {
        std::cout << "\n=== Hệ Thống Ví Điểm ===\n";
        std::cout << "1. Đăng Nhập\n";
        std::cout << "2. Đăng Ký\n";
        std::cout << "3. Thoát\n";
        std::cout << "Chọn một tùy chọn: ";
    }

    void showUserMenu() {
        std::cout << "\n=== Menu Người Dùng ===\n";
        std::cout << "1. Xem Số Dư\n";
        std::cout << "2. Chuyển Điểm\n";
        std::cout << "3. Xem Lịch Sử Giao Dịch\n";
        std::cout << "4. Đổi Mật Khẩu\n";
        if (current_user->isAdmin()) {
            std::cout << "5. Menu Quản Trị\n";
        }
        std::cout << "6. Đăng Xuất\n";
        std::cout << "Chọn một tùy chọn: ";
    }

    void showAdminMenu() {
        std::cout << "\n=== Menu Quản Trị ===\n";
        std::cout << "1. Tạo Người Dùng Mới\n";
        std::cout << "2. Xem Danh Sách Người Dùng\n";
        std::cout << "3. Sao Lưu Dữ Liệu\n";
        std::cout << "4. Khôi Phục Dữ Liệu\n";
        std::cout << "5. Quay Lại Menu Người Dùng\n";
        std::cout << "Chọn một tùy chọn: ";
    }

    bool login() {
        std::string username, password;
        std::cout << "Tên đăng nhập: ";
        username = getStringInput();
        if (!validateUsername(username)) return false;

        std::cout << "Mật khẩu: ";
        password = getStringInput();
        if (!validatePassword(password)) return false;

        auto user = db->getUser(username);
        if (user && user->verifyPassword(password)) {
            current_user = user;
            if (user->hasAutoGeneratedPassword()) {
                std::cout << "Bạn phải đổi mật khẩu trong lần đăng nhập đầu tiên.\n";
                changePassword();
            }
            return true;
        }
        std::cout << "Tên đăng nhập hoặc mật khẩu không đúng.\n";
        return false;
    }

    void registerUser() {
        std::string username, password, email;
        std::cout << "Tên đăng nhập: ";
        username = getStringInput();
        if (!validateUsername(username)) return;

        std::cout << "Mật khẩu: ";
        password = getStringInput();
        if (!validatePassword(password)) return;

        std::cout << "Email: ";
        email = getStringInput();
        if (!validateEmail(email)) return;

        auto user = std::make_shared<User>(username, password, email);
        if (db->addUser(user)) {
            auto wallet = std::make_shared<Wallet>(user->getWalletId());
            db->addWallet(wallet);
            std::cout << "Đăng ký thành công.\n";
        } else {
            std::cout << "Tên đăng nhập đã tồn tại.\n";
        }
    }

    void viewBalance() {
        auto wallet = db->getWallet(current_user->getWalletId());
        std::cout << "Số dư hiện tại: " << wallet->getBalance() << " điểm\n";
    }

    void transferPoints() {
        std::string dest_wallet_id;
        double amount;
        std::cout << "ID ví đích: ";
        dest_wallet_id = getStringInput();
        if (dest_wallet_id.empty()) {
            std::cout << "ID ví không được để trống.\n";
            return;
        }

        std::cout << "Số điểm: ";
        while (!(std::cin >> amount)) {
            std::cout << "Số điểm không hợp lệ. Vui lòng nhập một số: ";
            clearInputBuffer();
        }
        clearInputBuffer();

        if (!validateAmount(amount)) return;

        auto source_wallet = db->getWallet(current_user->getWalletId());
        auto dest_wallet = db->getWallet(dest_wallet_id);

        if (!dest_wallet) {
            std::cout << "Không tìm thấy ví đích.\n";
            return;
        }

        if (dest_wallet->getId() == source_wallet->getId()) {
            std::cout << "Không thể chuyển điểm đến cùng một ví.\n";
            return;
        }

        // Generate OTP for transaction confirmation
        OTP otp(current_user->getEmail());
        if (!otp.sendOTP()) {
            std::cout << "Không thể gửi mã OTP. Vui lòng thử lại.\n";
            return;
        }

        std::string otp_code;
        std::cout << "Nhập mã OTP: ";
        otp_code = getStringInput();
        if (otp_code.empty()) {
            std::cout << "Mã OTP không được để trống.\n";
            return;
        }

        if (!otp.verifyOTP(otp_code)) {
            std::cout << "Mã OTP không đúng.\n";
            return;
        }

        auto transaction = std::make_shared<Transaction>(source_wallet, dest_wallet, amount);
        transaction->setOtpCode(otp_code);
        transaction->setOtpVerified(true);
        
        if (transaction->execute()) {
            source_wallet->addTransaction(transaction);
            dest_wallet->addTransaction(transaction);
            db->addTransaction(transaction);
            std::cout << "Chuyển điểm thành công.\n";
        } else {
            std::cout << "Chuyển điểm thất bại. Số dư không đủ.\n";
        }
    }

    void viewTransactionHistory() {
        auto wallet = db->getWallet(current_user->getWalletId());
        auto history = wallet->getTransactionHistory();
        
        std::cout << "\nLịch Sử Giao Dịch:\n";
        for (const auto& transaction : history) {
            std::cout << "ID: " << transaction->getId() << "\n";
            std::cout << "Số điểm: " << transaction->getAmount() << "\n";
            std::cout << "Trạng thái: ";
            switch (transaction->getStatus()) {
                case TransactionStatus::PENDING:
                    std::cout << "Đang chờ";
                    break;
                case TransactionStatus::COMPLETED:
                    std::cout << "Hoàn thành";
                    break;
                case TransactionStatus::FAILED:
                    std::cout << "Thất bại";
                    break;
                case TransactionStatus::CANCELLED:
                    std::cout << "Đã hủy";
                    break;
            }
            std::cout << "\n";
            std::cout << "Thời gian: " << std::chrono::system_clock::to_time_t(transaction->getTimestamp()) << "\n";
            std::cout << "-------------------\n";
        }
    }

    void changePassword() {
        std::string new_password;
        std::cout << "Mật khẩu mới: ";
        new_password = getStringInput();
        if (!validatePassword(new_password)) return;

        current_user->changePassword(new_password);
        db->updateUser(current_user);
        std::cout << "Đổi mật khẩu thành công.\n";
    }

    void createNewUser() {
        std::string username, email;
        std::cout << "Tên đăng nhập: ";
        username = getStringInput();
        std::cout << "Email: ";
        email = getStringInput();

        // Generate random password
        std::string password = OTP::generateOTP();
        auto user = std::make_shared<User>(username, password, email);

        if (db->addUser(user)) {
            auto wallet = std::make_shared<Wallet>(user->getWalletId());
            db->addWallet(wallet);
            std::cout << "Tạo người dùng thành công.\n";
            std::cout << "Mật khẩu được tạo: " << password << "\n";
        } else {
            std::cout << "Tên đăng nhập đã tồn tại.\n";
        }
    }

    void viewAllUsers() {
        std::cout << "Chức năng đang được phát triển.\n";
    }

public:
    WalletSystem() : db(std::make_shared<Database>()) {}

    void run() {
        while (true) {
            if (!current_user) {
                showMainMenu();
                int choice = getIntInput();

                switch (choice) {
                    case 1:
                        login();
                        break;
                    case 2:
                        registerUser();
                        break;
                    case 3:
                        return;
                    default:
                        std::cout << "Invalid option.\n";
                }
            } else {
                showUserMenu();
                int choice = getIntInput();

                switch (choice) {
                    case 1:
                        viewBalance();
                        break;
                    case 2:
                        transferPoints();
                        break;
                    case 3:
                        viewTransactionHistory();
                        break;
                    case 4:
                        changePassword();
                        break;
                    case 5:
                        if (current_user->isAdmin()) {
                            handleAdminMenu();
                        } else {
                            std::cout << "Invalid option.\n";
                        }
                        break;
                    case 6:
                        current_user = nullptr;
                        break;
                    default:
                        std::cout << "Invalid option.\n";
                }
            }
        }
    }

    void handleAdminMenu() {
        while (true) {
            showAdminMenu();
            int choice = getIntInput();

            switch (choice) {
                case 1:
                    createNewUser();
                    break;
                case 2:
                    viewAllUsers();
                    break;
                case 3:
                    db->backup();
                    break;
                case 4: {
                    std::string backup_file;
                    std::cout << "Enter backup file path: ";
                    backup_file = getStringInput();
                    db->restore(backup_file);
                    break;
                }
                case 5:
                    return;
                default:
                    std::cout << "Invalid option.\n";
            }
        }
    }
};

int main() {
    WalletSystem system;
    system.run();
    return 0;
} 