#ifndef USER_H
#define USER_H

#include <string>
#include <vector>
#include <memory>
#include <chrono>

class User {
private:
    std::string username;
    std::string password_hash;
    std::string email;
    std::string full_name;
    std::string phone;
    std::string address;
    bool is_admin;
    bool is_auto_generated_password;
    std::string wallet_id;
    int login_attempts;
    bool is_locked;
    std::chrono::system_clock::time_point lock_time;
    bool is_email_verified;

public:
    User(const std::string& username, const std::string& password, 
         const std::string& email, bool is_admin = false);
    
    // Getters
    std::string getUsername() const { return username; }
    std::string getEmail() const { return email; }
    std::string getFullName() const { return full_name; }
    std::string getPhone() const { return phone; }
    std::string getAddress() const { return address; }
    bool isAdmin() const { return is_admin; }
    bool hasAutoGeneratedPassword() const { return is_auto_generated_password; }
    std::string getWalletId() const { return wallet_id; }
    bool isLocked() const { return is_locked; }
    bool isEmailVerified() const { return is_email_verified; }
    
    // Setters
    void setFullName(const std::string& name) { full_name = name; }
    void setPhone(const std::string& phone) { this->phone = phone; }
    void setAddress(const std::string& address) { this->address = address; }
    void setEmailVerified(bool verified) { is_email_verified = verified; }
    
    // Account management
    bool verifyPassword(const std::string& password) const;
    void changePassword(const std::string& new_password);
    void incrementLoginAttempts();
    void resetLoginAttempts();
    void lockAccount();
    void unlockAccount();
    bool isAccountLocked() const;
    
    // Serialization
    std::string serialize() const;
    static std::shared_ptr<User> deserialize(const std::string& data);
};

#endif // USER_H 